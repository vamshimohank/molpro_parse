def read_lsop_socE(filename,write_files=False):
    import numpy as np

    f = open(filename).readlines()

    WFstart_line=[]
    LSOPstart_line = []
    LSOPend_line = []
    LSOPlines = False


    for num1, line in enumerate(f):  # Find all the blocks we want to extract

        if 'Eigenvectors of spin-orbit matrix' in line:
            WFstart_line.append(num1 + 7)

        if ' Spin-Orbit Matrix (CM-1)' in line:
            LSOPstart_line.append(num1 + 5)  # Start of the Spin-Orbit Matrix data
            LSOPlines = True
        #        print('Found LSOP at line', num1)
        if 'No symmetry adaption' in line and LSOPlines == True:
            LSOPend_line.append(num1 - 2)  # End of the Spin-Orbit Matrix data
            LSOPlines = False
    # if LSOPlines==True or WFlines==True or  NOCIlines==True :
    #if LSOPlines == True or NOCIlines == True:
    #     print('One of the blocks has start, but has no end')
    #
    if len(LSOPstart_line) != len(WFstart_line):
        print('# WF blocks found is', len(WFstart_line), 'and of # L.S operator blocks is', len(LSOPstart_line),
              'Something is wrong! check the output file...')
    nstates = []
    LSOP = []
    SOC_E = []
    for i, num in enumerate(WFstart_line):
        nstates.append(int(f[num - 10][0:4]))
        LSOP.append(np.zeros((nstates[i], nstates[i]), dtype=np.complex128))  #
        LSOP[i] = LSOP[i] + 100 + 100j  #
        SOC_E.append(np.zeros(nstates[i]))  # fill energies arrays with zeros

        #so_mat = np.matlib.zeros((nstates[i], nstates[i]), dtype=np.complex128)

    for ns, n_states in enumerate(nstates):
        if write_files:
            lsop_fname = typ + ".lsop." + str(ns) + "." + str(n_states) + "s"  # create files for L.S operators
            lsop_out = open(lsop_fname, 'w')
            socE_fname = typ + ".esoc." + str(ns) + "." + str(n_states) + "s"  # create files for energies
            socE_out = open(socE_fname, 'w')

        #############
        ###### LSOP block details
        #############
        lop_block_rows = n_states * 3  # row size for each block
        lop_block_gap = 3
        lsop_bcs_d = 10  # way it is printed in molpro
        lsop_block_col_size = lsop_bcs_d  # equal to default if n_states < default
        if n_states <= lsop_block_col_size:
            lsop_n_blocks = 1
            lsop_block_col_size = n_states
            lsop_last_block_col_size = 0
        else:
            lsop_n_blocks = int(n_states / lsop_block_col_size)  # No of blocks the matrix is written
            if lsop_n_blocks * lsop_block_col_size != n_states:
                lsop_last_block_col_size = n_states - (lsop_n_blocks * lsop_block_col_size)
                lsop_n_blocks = lsop_n_blocks + 1
            else:
                lsop_last_block_col_size = 0

        #############
        ###### LSOP extraction
        #############
        #
        for nbl in range(0, lsop_n_blocks):  # loop over the No of blocks
            if lsop_last_block_col_size != 0 and nbl == lsop_n_blocks - 1:
                lsop_block_col_size = lsop_last_block_col_size
                #                                                                   # loop over block lines
            for n in range(LSOPstart_line[ns] + nbl * lop_block_rows + nbl * lop_block_gap,
                           LSOPstart_line[ns] + (nbl + 1) * lop_block_rows + nbl * lop_block_gap):
                if f[n] != '\n' and f[n] != ' \n':  # not to consider empty lines
                    if f[n][
                        2] != ' ':  # rows with real parts also contain No, and (j, mj) information (only No is now used)
                        for col in range(0, lsop_block_col_size):
                            LSOP[ns][int(f[n].split()[0]) - 1][col + nbl * lsop_bcs_d] = complex(
                                float(f[n][19 + 11 * col:30 + +11 * col]),
                                0)  # select only relevant part of the line and read
                    else:  # rows with imaginary parts have spaces in the beginning
                        for col in range(0, lsop_block_col_size):
                            LSOP[ns][int(f[n - 1].split()[0]) - 1][col + nbl * lsop_bcs_d] = \
                            LSOP[ns][int(f[n - 1].split()[0]) - 1][col + nbl * lsop_bcs_d] + complex(0, float(f[n][
                                                                                                              19 + 11 * col:30 + 11 * col]))  # 19 symbol in line is the first for LSOP, every number is 11 symbols => 30 - end of the first number
        #
        if write_files :
            for nr in range(n_states):  # print to file
                prnt = ''  # specify empty line, then 'collect' the whole row
                for nc in range(n_states):
                    prnt += str(LSOP[ns].real[nr, nc]) + "+I(" + str(
                        LSOP[ns][nr][nc].imag) + ") "  # normal output, same way as in molpro
                #            prnt += str("%11f"%LSOP[ns][nr][nc].real)+str("+I(%11f) "%LSOP[ns].imag[nr,nc]) # normal output, same way as in molpro (other format(?))
                #            prnt += str("%11f"%LSOP[ns].real[nc,nr])+str("+I(%11f) "%LSOP[ns].imag[nc,nr]) # transposed output, WFs in rows

                print(prnt, file=lsop_out)
            lsop_out.close()

        #############
        ###### Energies extraction
        #############
        #
        for n in range(LSOPend_line[ns] + 10, WFstart_line[ns] - 9):
            SOC_E[ns][int(f[n].split()[0]) - 1] = float(f[n].split()[1])  # *hartree
            if write_files :
                print(SOC_E[ns][int(f[n].split()[0])-1],file=socE_out)
        if write_files :
            socE_out.close()
    LSOP = np.array(LSOP)
    return LSOP,SOC_E
